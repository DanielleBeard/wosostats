if(minute %in% players_sheet$FirstMinute[player]:players_sheet$LastMinute[player]) {
player_vector[length(player_vector)+1] <- players_sheet$Player[player]
}
}
minutesCol <- rep(minute, times = (length(player_vector)^2))
firstPlayerCol <- rep(player_vector, each = length(player_vector))
sharedPlayerCol <- rep(player_vector, times = length(player_vector))
newRows <- (nrow(match_shared_minutes_data)+1):(nrow(match_shared_minutes_data)+(length(player_vector)^2))
match_shared_minutes_data[newRows,"minute"] <- minutesCol
match_shared_minutes_data[newRows,"firstplayer"] <- firstPlayerCol
match_shared_minutes_data[newRows,"sharedplayer"] <- sharedPlayerCol
}
shared_minutes_data[[index]] <- match_shared_minutes_data
}
for(i in 1:length(shared_minutes_data)) print(nrow(shared_minutes_data[[i]]))
View(test_network)
createPassingSubset <- function(match_sheet) {
#create logical vector to check if a given row was a completed pass
rowIsACompletedPass <- c(grepl("passes.*.c", match_sheet$poss.action))
#create empty vector for what will be all the players who received a respective pass
pass_recipient_player <- character(nrow(match_sheet))
#loops through each passing action to get names of players who received a completed pass
for(i in 1:nrow(match_sheet)) {
if(rowIsACompletedPass[i]){
sheet_event_next <- as.numeric(match_sheet[i,"event"][1])+1
sheet_row_nextevent <- grep(paste0("^",sheet_event_next,"$"), match_sheet[,"event"])[1]
pass_recipient_player[i] <- match_sheet[sheet_row_nextevent, "poss.player"]
}
}
#add column to the match spreadsheet for each completed pass event's recipient
match_sheet$pass_recipient <- pass_recipient_player
#subset the match spreadsheet to only include completed passes
match_sheet <- match_sheet[grep("passes.*.c",match_sheet[,"poss.action"]),]
match_sheet
}
test_network_agg <- createPassingNetwork(data_source)
source('~/Google Drive/WoSo Stats Project/Repo Testbed/code/testing/passing-network.R', echo=TRUE)
database <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/database.csv")
database <- read.csv(textConnection(database), stringsAsFactors = FALSE)
getMatchFiles(competition.slug = "nwsl-2016", type="match.csv.link", team="PTFC", database=database)
source('~/wosostats/code/version-3/creating-stats-tables.R', echo=TRUE)
getMatchFiles(competition.slug = "nwsl-2016", type="match.csv.link", team="PTFC", database=database)
test_pass_network <- createPassingNetwork(data_source = match_list)
test_mins_network <- createSharedMinsNetwork(data_source = match_list)
?NULL
test = NULL
test == "PTFC"
test == NULL
test <- NA
is.null(test)
test==NULL
is.null(test)
test <- NULL
is.null(test)
tes
test
test <- "PTFC"
!is.na(test)
createPassingNetwork <- function(data_source, team=NA){
if(class(data_source) == "list") {
match_list <- data_source
#create empty list where all the subsets of the match spreadsheets for only completed passes will go
passing_data <- list()
#create passing network aggregated from multiple matches
for(index in 1:length(match_list)) {
match_sheet <- match_list[[index]]
match_sheet <- match_sheet[,c("event","poss.team","poss.number","poss.player","poss.action")]
match_sheet <- createPassingSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"team"]==team,]
passing_data[[index]] <- match_sheet
}
for(index in 1:length(passing_data)) {
if(exists("passing_data_binded")) {
passing_data_binded <- rbind(passing_data_binded, passing_data[[index]])
} else {
passing_data_binded <- passing_data[[index]]
}
}
passing_network <- as.data.frame(unclass(table(passing_data_binded$poss.player,passing_data_binded$pass_recipient)))
passing_network
}
#create passing network for one match
else if(class(data_source) == "data.frame"){
match_sheet <- data_source
match_sheet <- match_sheet[,c("event","poss.team","poss.number","poss.player","poss.action")]
#create logical vector to check if a given row was a completed pass
match_sheet <- createPassingSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"team"]==team,]
#create the passing network table
passing_network <- as.data.frame(unclass(table(match_sheet$poss.player,match_sheet$pass_recipient)))
passing_network
}
}
test_pass_network <- createPassingNetwork(data_source = match_list)
test_pass_network_v2 <- createPassingNetwork(data_source = match_list, team = "PTFC")
createPassingNetwork <- function(data_source, team=NA){
if(class(data_source) == "list") {
match_list <- data_source
#create empty list where all the subsets of the match spreadsheets for only completed passes will go
passing_data <- list()
#create passing network aggregated from multiple matches
for(index in 1:length(match_list)) {
match_sheet <- match_list[[index]]
match_sheet <- match_sheet[,c("event","poss.team","poss.number","poss.player","poss.action")]
match_sheet <- createPassingSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"poss.team"]==team,]
passing_data[[index]] <- match_sheet
}
for(index in 1:length(passing_data)) {
if(exists("passing_data_binded")) {
passing_data_binded <- rbind(passing_data_binded, passing_data[[index]])
} else {
passing_data_binded <- passing_data[[index]]
}
}
passing_network <- as.data.frame(unclass(table(passing_data_binded$poss.player,passing_data_binded$pass_recipient)))
passing_network
}
#create passing network for one match
else if(class(data_source) == "data.frame"){
match_sheet <- data_source
match_sheet <- match_sheet[,c("event","poss.team","poss.number","poss.player","poss.action")]
#create logical vector to check if a given row was a completed pass
match_sheet <- createPassingSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"poss.team"]==team,]
#create the passing network table
passing_network <- as.data.frame(unclass(table(match_sheet$poss.player,match_sheet$pass_recipient)))
passing_network
}
}
rm(test)
test_pass_network_v2 <- createPassingNetwork(data_source = match_list, team = "PTFC")
View(test_pass_network_v2)
createSharedMinsNetwork <- function(data_source, team=NA) {
if(class(data_source)=="list") {
match_list <- data_source
#create empty list where all the subsets of the match spreadsheets for only completed passes will go
shared_minutes_data <- list()
for(index in 1:length(match_list)) {
match_sheet <- match_list[[index]]
match_shared_minutes_data <- createSharedMinsSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"poss.team"]==team,]
shared_minutes_data[[index]] <- match_shared_minutes_data
}
for(index in 1:length(shared_minutes_data)) {
if(exists("shared_minutes_data_binded")) {
shared_minutes_data_binded <- rbind(shared_minutes_data_binded, shared_minutes_data[[index]])
} else {
shared_minutes_data_binded <- shared_minutes_data[[index]]
}
}
shared_minutes_network <- as.data.frame(unclass(table(shared_minutes_data_binded$firstplayer,shared_minutes_data_binded$sharedplayer)))
shared_minutes_network
}
else if (class(data_source)=="data.frame"){
match_sheet <- data_source
match_shared_minutes_data <- createSharedMinsSubset(match_sheet)
if(!is.na(team)) match_sheet <- match_sheet[match_sheet[,"poss.team"]==team,]
shared_minutes_network <- as.data.frame(unclass(table(match_shared_minutes_data$firstplayer,match_shared_minutes_data$sharedplayer)))
shared_minutes_network
}
}
test_mins_network <- createSharedMinsNetwork(data_source = match_list)
test_mins_network_v2 <- createSharedMinsNetwork(data_source = match_list, team="PTFC")
View(test_pass_network_v2)
match_list[[1]][2, "poss.player"]
View(match_list[[1]])
match_list[[1]][2, c("poss.player","poss.team","poss.number")]
class(match_list[[1]][2, c("poss.player","poss.team","poss.number")])
unclass(match_list[[1]][2, c("poss.player","poss.team","poss.number")])
unlist(match_list[[1]][2, c("poss.player","poss.team","poss.number")])
class(unlist(match_list[[1]][2, c("poss.player","poss.team","poss.number")]))
length(unlist(match_list[[1]][2, c("poss.player","poss.team","poss.number")]))
paste(unlist(match_list[[1]][2, c("poss.player","poss.team","poss.number")]))
collapse(match_list[[1]][2, c("poss.player","poss.team","poss.number")]))
collapse(match_list[[1]][2, c("poss.player","poss.team","poss.number")])
collapse
paste(unlist(match_list[[1]][2, c("poss.player","poss.team","poss.number")]),collapse = " ")
test <- "foo"
2 + 3
2+3
2+if(test=="foo") 3 else 4
2+if(test!="foo") 3 else 4
sheet_row_nextevent <- 2
paste0(match_sheet[sheet_row_nextevent,"poss.player"],
" (",
match_sheet[sheet_row_nextevent,"poss.team"],
") ",
(if(is.na(match_sheet[sheet_row_nextevent, "poss.team"]))"" else match_sheet[sheet_row_nextevent, "poss.team"]))
match_sheet <- match_list[[1]]
paste0(match_sheet[sheet_row_nextevent,"poss.player"],
" (",
match_sheet[sheet_row_nextevent,"poss.team"],
") ",
(if(is.na(match_sheet[sheet_row_nextevent, "poss.team"]))"" else match_sheet[sheet_row_nextevent, "poss.team"]))
paste0(match_sheet[sheet_row_nextevent,"poss.player"],
" (",
match_sheet[sheet_row_nextevent,"poss.team"],
") ",
(if(is.na(match_sheet[sheet_row_nextevent, "poss.team"]))"" else match_sheet[sheet_row_nextevent, "poss.number"]))
paste0(match_sheet[sheet_row_nextevent,"poss.player"],
" (",
match_sheet[sheet_row_nextevent,"poss.team"],
") ",
(if(is.na(match_sheet[sheet_row_nextevent, "poss.number"])) "" else match_sheet[sheet_row_nextevent, "poss.number"]))
paste0(match_sheet[sheet_row_nextevent,"poss.player"],
" (",
match_sheet[sheet_row_nextevent,"poss.team"],
")")
rm(sheet_row_nextevent)
#create logical vector to check if a given row was a completed pass
rowIsACompletedPass <- c(grepl("passes.*.c", match_sheet$poss.action))
#create empty vector for what will be all the players who received a respective pass
pass_recipient_player <- character(nrow(match_sheet))
#loops through each passing action to get names of players who received a completed pass
for(i in 1:nrow(match_sheet)) {
if(rowIsACompletedPass[i]){
sheet_event_next <- as.numeric(match_sheet[i,"event"][1])+1
sheet_row_nextevent <- grep(paste0("^",sheet_event_next,"$"), match_sheet[,"event"])[1]
pass_recipient_player[i] <- match_sheet[sheet_row_nextevent,"poss.player"]
pass_recipient_team[i] <- match_sheet[sheet_row_nextevent,"poss.team"]
}
}
#add column to the match spreadsheet for each completed pass event's recipient
match_sheet$pass_recipient <- pass_recipient_player
match_sheet$pass_recipient_team <- pass_recipient_team
#create logical vector to check if a given row was a completed pass
rowIsACompletedPass <- c(grepl("passes.*.c", match_sheet$poss.action))
#create empty vector for what will be all the players who received a respective pass
pass_recipient_player <- character(nrow(match_sheet))
pass_recipient_team <- character(nrow(match_sheet))
#loops through each passing action to get names of players who received a completed pass
for(i in 1:nrow(match_sheet)) {
if(rowIsACompletedPass[i]){
sheet_event_next <- as.numeric(match_sheet[i,"event"][1])+1
sheet_row_nextevent <- grep(paste0("^",sheet_event_next,"$"), match_sheet[,"event"])[1]
pass_recipient_player[i] <- match_sheet[sheet_row_nextevent,"poss.player"]
pass_recipient_team[i] <- match_sheet[sheet_row_nextevent,"poss.team"]
}
}
#add column to the match spreadsheet for each completed pass event's recipient
match_sheet$pass_recipient <- pass_recipient_player
match_sheet$pass_recipient_team <- pass_recipient_team
View(match_sheet)
paste(match_sheet$pass_recipient, match_sheet$pass_recipient_team)
match_sheet$pass_recipient_string <- paste(match_sheet$pass_recipient, match_sheet$pass_recipient_team)
x <- factor(c("yes","yes","no","yes","no"))
x
table(x)
table(c("yes","yes","no","yes","no"))
c("yes","yes","no","yes","no")
unclass(x)
x <- c("a","b","c","c","d","a")
c
x
x[1]
x[[1]]
x[[1:4]]
x[1:4]
u <- x > "a"
x[u]
x[[u]]
rm(u)
x <- list(foo=1:4,bar=0.6)
list
x
x[1]
x[[1]]
x$foo
class(x[1])
class(x[[1]])
x
x[[1]]
x[1]
x[c(1)]
x[[1]]
x[[1]][[1]]
x[[1]][1]
x[1]
x[1][[1]]
x[1][[1]][1]
x[1,2]
x[[1]]
x[[1:2]]
x[1:2]
x[[1,2]]
x[[c(1,2)]]
x
rnum
nrow
formals(nrow)
formals(read.csv)
search()
make.power
source('~/wosostats/code/version-3/creating-stats.R', echo=TRUE)
ls()
x <- list(a = 1:5, b =rnorm(10))
x
lapply(x,mean)
elt
lapply(x, function(x) x[1])
lapply(x, function(x) x[,1])
lapply(x, function(elt) elt[,1])
elt
x
sapply(x, mean)
names(sapply(x, mean))
?gl
noise()
debug(lapply(x, mean))
lapply(x, mean)
source('~/wosostats/code/version-3/creating-stats.R', echo=TRUE)
your_stats_list <- getStatsInBulk(team = "USA", per90 = TRUE)
your_stats_list <- getStatsInBulk(competition.slug = "database", team = "USA", per90 = TRUE)
matches
your_stats_list <- getStatsInBulk(competition.slug = "database", type="stats.csv.link", team = "USA", per90 = TRUE)
getMatchFiles <- function(competition.slug, type, team=NA, round=NA, multi_round=NA, month_year=NA, location_complete=FALSE, database=NA) {
if(is.na(database)){
database <- getURL("https://raw.githubusercontent.com/amj2012/wosostats/master/database.csv")
database <- read.csv(textConnection(database), stringsAsFactors = FALSE)
}
#type is either "match.csv.link" or "stats.csv.link"
if(competition.slug == "database"){
if(!is.na(team)){
database <- database[database[,"home.team"] %in% team | database[,"away.team"] %in% team,]
}
if(location_complete == TRUE){
matches <- database[!is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes",type]
names_matchup <- database[!is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes","matchup"]
dates_matchup <- database[!is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes","date"]
names <- paste(names_matchup,dates_matchup,sep = "-")
} else {
matches <- database[!is.na(database[,"match.csv.link"]),type]
names_matchup <- database[!is.na(database[,"match.csv.link"]),"matchup"]
dates_matchup <- database[!is.na(database[,"match.csv.link"]),"date"]
names <- paste(names_matchup,dates_matchup,sep = "-")
}
} else {
if (!is.na(round)){
database <- database[database[,"round"]==round,]
} else if(!is.na(month_year)) {
month <- strsplit(month_year, "_")[[1]][1]
year <- strsplit(month_year,"_")[[1]][2]
database <- database[database[,"month"]==month & database[,"year"]==year,]
} else if(length(multi_round) > 1) {
database <- database[database[,"round"] %in% multi_round,]
}
if(!is.na(team)){
database <- database[database[,"home.team"] %in% team | database[,"away.team"] %in% team,]
}
if(location_complete == TRUE) {
matches <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes",type]
competition_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes","competition.slug"]
names_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes","matchup"]
dates_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]) & database[,"location.data"]=="yes","date"]
names <- tolower(paste(competition_matchup,names_matchup,dates_matchup,sep = "-"))
} else {
matches <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]),type]
competition_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]),"competition.slug"]
names_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]),"matchup"]
dates_matchup <- database[database[,"competition.slug"] == competition.slug & !is.na(database[,"match.csv.link"]),"date"]
names <- tolower(paste(competition_matchup,names_matchup,dates_matchup,sep = "-"))
}
}
match_list <- vector("list", 0)
x <- 1
while (x <= length(matches)) {
d <- getURL(matches[x])
d <- read.csv(textConnection(d), stringsAsFactors = FALSE)
match_list[[x]] <- d
x <- x + 1
}
assign("match_list",match_list, pos=1)
assign("match_names", names, pos=1)
}
rm(match_names, match_list,your_stats_list)
your_stats_list <- getStatsInBulk(competition.slug = "database", type="stats.csv.link", team = "USA", per90 = TRUE)
match_names
stats_list <- your_stats_list
all_stats_binded <- do.call("rbind", stats_list)
class(stats_list)
rm(your_stats_list ,stats_list)
all_stats_binded <- do.call("rbind", match_list)
View(all_stats_binded)
test.list <- list(c("foo","bar","toa"), c("jak","daxter","precursor"), c("spyro", "sparx", "hunter"))
test.list <- list(c("foo","bar","toa"), c("jak","daxter","precursor"), c("spyro", "sparx", "hunter"))
test.list
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class))
ggplot(mpg, aes(displ)) +
geom_point(aes(y = hwy, colour = class))
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = class))
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = class)) +
geom_point()
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class))
ggplot(mpg, aes(displ)) +
geom_point(aes(y = hwy, colour = class))
ggplot(mpg) +
geom_point(aes(displ, hwy, colour = class))
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(colour = class)) +
geom_smooth(se = FALSE)
ggplot(mpg, aes(cty, hwy)) + geom_point()
ggplot(mpg, aes(cty, hwy)) + geom_point(color = "darkblue")
ggplot(mpg, aes(cty, hwy)) + geom_point(color = "green")
ggplot(mpg, aes(cty, hwy)) + geom_point(aes(color = "green"))
ggplot(mpg, aes(cty, hwy)) + geom_point(aes(color = c("green","blue","red")))
ggplot(mpg, aes(cty, hwy)) + geom_point(aes(color = hwy))
ggplot(mpg, aes(cty, hwy)) + geom_point(color = hwy)
ggplot(mpg, aes(cty, hwy)) + geom_point(color = "green")
ggplot(mpg, aes(cty, hwy)) + geom_point(color = hwy)
ggplot(mpg, aes(cty, hwy)) + geom_point(aes(color = hwy))
ggplot(mpg, aes(cty, hwy)) + geom_point(color = "red")
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_smooth(aes(colour = "loess"), method = "loess", se = FALSE) +
geom_smooth(aes(colour = "lm"), method = "lm", se = FALSE)
ggplot() +
geom_point(mapping = aes(y = hwy, x = cty), data = mpg) +
geom_smooth(data = mpg, mapping = aes(cty, hwy))
ggplot(mpg) +
geom_point(mapping = aes(y = hwy, x = cty)) +
geom_smooth(mapping = aes(cty, hwy))
ggplot(mpg) +
geom_point(aes(y = hwy, x = cty)) +
geom_smooth(aes(cty, hwy))
ggplot(mpg, aes(cty, hwy)) +
geom_point() +
geom_smooth()
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(log(brainwt), log(bodywt)), data = msleep)
ggplot(diamonds, aes(carat, price)) +
geom_point()
ggplot(diamonds, aes(carat, price)) +
geom_point(aes(log(brainwt), log(bodywt)), msleep)
ggplot(mpg) +
geom_point(aes(class, cty)) +
geom_boxplot(aes(trans, hwy))
ggplot(mpg) +
geom_point(aes(class, cty))
ggplot(mpg) +
geom_boxplot(aes(trans, hwy))
ggplot(mpg) +
geom_point(aes(class, cty)) +
geom_boxplot(aes(trans, hwy))
mpg
ggplot(mpg) +
geom_point(aes(class, cyl)) +
geom_boxplot(aescty, hwy))
ggplot(mpg) +
geom_point(aes(class, cyl)) +
geom_boxplot(aes(cty, hwy))
df <- data.frame(x=c(0, 0, 0), y =c(1, 2, 3), z=c("red", "green", "blue"))
ggplot(df, aes(x, y)) + geom_point()
library(ggplot2)
ggplot(df, aes(x, y)) + geom_point()
ggplot(df, aes(x, y)) + geom_point(color=z)
ggplot(df, aes(x, y)) + geom_point(color="z")
ggplot(df, aes(x, y)) + geom_point(aes(color=z))
ggplot(df, aes(x, y)) + geom_point(aes(color=z, shape=z))
?theme
df <- data.frame(x = 1, y = 1:4, z = 4:1)
p <- ggplot(df, aes(x, y)) + geom_tile(aes(fill = z))
p
p + guides(fill = guide_colorbar(nbin=10))
p + guides(fill = guide_colorbar(nbin=5))
p + guides(fill = guide_colorbar(nbin=3))
p + guides(fill = guide_colorbar(nbin=2))
p + guides(fill = guide_colorbar(nbin=50))
install.packages(c("backports", "BH", "digest", "knitr", "lazyeval", "MASS", "mgcv", "nlme", "Rcpp", "RCurl", "reshape2", "rlang", "rmarkdown", "rpart", "rprojroot", "stringr", "tibble", "tidyr", "viridisLite", "yaml"))
source('~/wosostats/code/version-3/tidy-excel.R', echo=TRUE)
setwd("~/Google Drive/WoSo Stats Project/push folder")
list.files()
match.sheet <- TidyMatchExcel(match.file = "shebelieves-cup-2018-usa-eng-030718.xlsx")
View(match.sheet)
getwd()
write.csv(match.sheet, file="shebelieves-cup-2018-usa-eng-030718.csv", row.names = FALSE)
setwd("~/Google Drive/WoSo Stats Project/push folder/stats")
getwd()
your.stats <- getStatsForMatch(match_csv = match.sheet, per90 = TRUE)
source('~/wosostats/code/version-3/creating-stats.R', echo=TRUE)
your.stats <- getStatsForMatch(match_csv = match.sheet, per90 = TRUE)
View(your.stats)
write.csv(your.stats, file = "shebelieves-cup-2018-usa-eng-030718.csv", row.names = FALSE)
setwd("~/wosostats/source/csv/shebelieves-cup-2018")
list.files()
match.sheet <- read.csv("shebelieves-cup-2018-usa-fra-030418.csv", stringsAsFactors = FALSE)
View(match.sheet)
class(match.sheet$event)
your.stats <- getStatsForMatch(match_csv = match.sheet, per90 = TRUE)
View(your.stats)
write.csv(your.stats, file="shebelieves-cup-2018-usa-fra-030418.csv", row.names = FALSE)
setwd("~/wosostats/stats/shebelieves-cup-2018")
write.csv(your.stats, file="shebelieves-cup-2018-usa-fra-030418.csv", row.names = FALSE)
write.csv(your.stats, file="shebelieves-cup-2018-usa-fra-030418.csv", row.names = FALSE)
setwd("~/wosostats/source/csv/shebelieves-cup-2018")
View(match.sheet)
write.csv(match.sheet, file="shebelieves-cup-2018-usa-fra-030418.csv", row.names = FALSE)
setwd("~/wosostats/source/excel/shebelieves-cup-2018")
match.sheet <- TidyMatchExcel(match.file = "shebelieves-cup-2018-usa-eng-030718.xlsx")
View(match.sheet)
setwd("~/wosostats/source/csv/shebelieves-cup-2018")
write.csv(match.sheet, file="shebelieves-cup-2018-usa-eng-030718.csv", row.names = FALSE)
setwd("~/wosostats/stats/shebelieves-cup-2018")
your.stats <- getStatsForMatch(match_csv = match.sheet, per90 = TRUE)
View(your.stats)
write.csv(your.stats, file = "shebelieves-cup-2018-usa-eng-030718.csv", row.names = FALSE)
